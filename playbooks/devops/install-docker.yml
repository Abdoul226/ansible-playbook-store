---
# playbooks/devops/install-docker.yml
- name: Installer Docker CE + Compose v2 (repo officiel)
  hosts: all
  become: yes

  vars:
    # --- Utilisateurs à autoriser (groupe docker) ---
    docker_users: []           # ex: ['aziz','devops']

    # --- Options daemon.json (ex: cgroupdriver=systemd, logs) ---
    docker_daemon_options:
      log-driver: "json-file"
      log-opts:
        max-size: "10m"
        max-file: "3"
      exec-opts:
        - "native.cgroupdriver=systemd"

    # --- Versions (laisser vide = latest stable) ---
    docker_packages:
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-buildx-plugin
      - docker-compose-plugin

  pre_tasks:
    - name: Detect OS
      debug:
        msg: "{{ ansible_distribution }} {{ ansible_distribution_version }} ({{ ansible_os_family }})"

  tasks:
    ######################################################################
    # Debian / Ubuntu
    ######################################################################
    - name: (Debian/Ubuntu) Supprimer anciens paquets Docker si présents
      apt:
        name:
          - docker
          - docker.io
          - docker-engine
          - containerd
          - runc
        state: absent
        purge: yes
      when: ansible_os_family == "Debian"
      tags: [docker, cleanup]

    - name: (Debian/Ubuntu) Paquets prérequis
      apt:
        name:
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
        state: present
        update_cache: yes
      when: ansible_os_family == "Debian"
      tags: [docker, prereqs]

    - name: (Debian/Ubuntu) Ajouter la clé GPG Docker
      apt_key:
        url: https://download.docker.com/linux/{{ ansible_distribution | lower }}/gpg
        state: present
      when: ansible_os_family == "Debian"
      tags: [docker, repo]

    - name: (Debian/Ubuntu) Ajouter le dépôt Docker
      apt_repository:
        repo: "deb [arch={{ ansible_architecture }}] https://download.docker.com/linux/{{ ansible_distribution | lower }} {{ ansible_lsb.codename }} stable"
        state: present
        filename: docker
      when: ansible_os_family == "Debian"
      tags: [docker, repo]

    - name: (Debian/Ubuntu) Installer Docker + plugins
      apt:
        name: "{{ docker_packages }}"
        state: present
        update_cache: yes
      when: ansible_os_family == "Debian"
      tags: [docker, install]

    ######################################################################
    # RHEL / CentOS / Rocky / Alma
    ######################################################################
    - name: (RHEL-like) Supprimer anciens paquets Docker si présents
      package:
        name:
          - docker
          - docker-client
          - docker-client-latest
          - docker-common
          - docker-engine
          - docker-latest
          - docker-latest-logrotate
          - docker-logrotate
          - docker-engine-selinux
          - containerd
          - runc
        state: absent
      when: ansible_os_family == "RedHat"
      tags: [docker, cleanup]

    - name: (RHEL-like) Prérequis + gestion de repo
      package:
        name:
          - yum-utils
          - device-mapper-persistent-data
          - lvm2
        state: present
      when: ansible_os_family == "RedHat"
      tags: [docker, prereqs]

    - name: (RHEL-like) Ajouter repo officiel Docker CE
      command: >
        yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
      args:
        creates: /etc/yum.repos.d/docker-ce.repo
      when: ansible_os_family == "RedHat"
      tags: [docker, repo]

    - name: (RHEL-like) Installer Docker + plugins
      package:
        name: "{{ docker_packages }}"
        state: present
      when: ansible_os_family == "RedHat"
      tags: [docker, install]

    ######################################################################
    # Configuration commune
    ######################################################################
    - name: Créer le groupe docker s'il n'existe pas
      group:
        name: docker
        state: present
      tags: [docker, users]

    - name: Ajouter les utilisateurs au groupe docker
      user:
        name: "{{ item }}"
        groups: docker
        append: yes
      loop: "{{ docker_users }}"
      when: docker_users | length > 0
      tags: [docker, users]

    - name: Créer /etc/docker
      file:
        path: /etc/docker
        state: directory
        owner: root
        group: root
        mode: '0755'
      tags: [docker, config]

    - name: Configurer /etc/docker/daemon.json
      copy:
        dest: /etc/docker/daemon.json
        mode: '0644'
        content: "{{ docker_daemon_options | to_nice_json }}"
      notify: Restart docker
      tags: [docker, config]

    - name: Activer et démarrer Docker
      service:
        name: docker
        state: started
        enabled: yes
      tags: [docker, service]

    - name: Vérifier versions (docker & compose)
      shell: |
        set -e
        docker --version
        docker compose version || true
      register: docker_versions
      changed_when: false
      tags: [docker, verify]

    - name: Afficher versions
      debug:
        var: docker_versions.stdout_lines
      tags: [docker, verify]

  handlers:
    - name: Restart docker
      service:
        name: docker
        state: restarted

